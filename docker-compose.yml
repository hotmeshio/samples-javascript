services:
  hotmesh-sandbox:
    build: .
    command: tail -f /dev/null
    ports:
      - "3333:3333"
    container_name: hotmesh-sandbox
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - /app/node_modules

  hotmesh-dashboard:
    platform: linux/amd64
    build:
      context: .
      target: development
    command: npm run server
    develop:
      watch:
      - action: sync
        path: .
        target: /home/node/app
        ignore:
          - node_modules/
      - action: rebuild
        path: package.json
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=development
      - PORT=3010
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3010/health || exit 1
      interval: 5s
      timeout: 4s
      retries: 50

  redis:
    image: redis/redis-stack:7.2.0-v10
    platform: linux/amd64
    environment:
      REDIS_ARGS: "--requirepass key_admin"
    ports:
      - "6399:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "key_admin", "ping"]
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - redis_data:/data

  valkey:
    image: valkey/valkey:7.2.5
    platform: linux/amd64
    ports:
      - "6398:6379"
    volumes:
      - valkey_data:/data
      - ./valkey.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  dragonflydb:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    ulimits:
      memlock: -1
    ports:
      - "6397:6379"
    volumes:
      - dragonfly_data:/data

volumes:
  redis_data:
    driver: local
  valkey_data:
    driver: local
  dragonfly_data:
    driver: local
